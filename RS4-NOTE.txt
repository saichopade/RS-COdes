import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.datasets import load_breast_cancer
import numpy as np

#Step 2: Loading the Breast Cancer dataset
data = load_breast_cancer()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target # target: 0 = malignant, 1 = benign

# Step 3: Data Preprocessing (optional, depending on dataset)
# In this case, the data is already preprocessed, but further normalization or feature selection may be added.
# Step 4: Splitting the data into train and test sets
X = df.drop(columns='target') # features
y = df['target'] # target variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Training the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
# Step 6: Predicting and evaluating the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Model Accuracy:", accuracy)
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Step 7: Making recommendations based on prediction outcomes
def prognosis_recommendation(features):
    """ 
    Function to provide prognosis recommendation based on model predictions.
    :param features: Array of patient features
    :return: String recommendation
    """
    prediction = model.predict([features])
    if prediction[0] == 0:
        return "High risk of malignant cancer. Immediate consultation and further tests recommended."
    else:
        return "Benign results. Routine monitoring suggested, but follow up with a healthcare provider."

# Example usage
example_patient =X_test.iloc[0].values
recommendation = prognosis_recommendation(example_patient)
print("Recommendation:", recommendation)

---------------------------------
The acj_rs_assgn_4.py script focuses on predictive modeling for breast cancer diagnosis and provides recommendations based on predictions. It employs machine learning techniques, specifically Random Forest Classification, to classify tumors as malignant or benign using the Breast Cancer dataset. Here’s a detailed explanation:

1. Dataset and Overview
The script uses the Breast Cancer dataset from Scikit-learn, 
which contains the following:
Features: 30 numerical measurements of tumors (e.g., mean radius, texture, area, smoothness).
Target:
    0: Malignant (cancerous).
    1: Benign (non-cancerous).

2. Data Loading and Preprocessing
Dataset Loading:
The dataset is loaded using load_breast_cancer() from Scikit-learn.
Features are stored in a DataFrame, and the target variable is added as a separate column ('target').

Preprocessing:
    The dataset is already clean and numeric, so no additional preprocessing is done.
    Features (X) and the target variable (y) are separated.

Data Splitting:
The dataset is split into training (80%) and testing (20%) subsets using train_test_split().

3. Model Training
Algorithm: Random Forest Classifier
    A Random Forest model with 100 decision trees (n_estimators=100) is trained on the dataset.
    The model is built to handle classification tasks efficiently and is robust to overfitting.


4. Model Evaluation
Prediction:
The model predicts tumor types (malignant or benign) on the test data.

Evaluation Metrics:
`Accuracy: Measures overall correctness of the model.
`Classification Report: Includes precision, recall, F1-score, and support for each class.
`Confusion Matrix: Summarizes true positives, true negatives, false positives, and false negatives.

Example Output:
Model Accuracy: 0.96

Classification Report:
              precision    recall  f1-score   support
           0       0.95       0.97      0.96        42
           1       0.97       0.95      0.96        72

Confusion Matrix:
[[41  1]
 [ 4 68]]

5. Recommendations Based on Predictions
`Prognosis Recommendation Function:
prognosis_recommendation(features):
    Accepts a patient’s features as input.
    Predicts the tumor type using the trained Random Forest model.
    Returns a recommendation based on the prediction:
        Malignant (0): High risk. Immediate medical consultation and further tests recommended.
        Benign (1): Low risk. Routine monitoring suggested with follow-ups.

6. Example Usage
A test sample is selected from the testing set (X_test).
The prognosis_recommendation() function is called with this sample’s features to:
    Predict the tumor type.
    Generate a personalized recommendation.
Example Output:
Recommendation: High risk of malignant cancer. Immediate consultation and further tests recommended.

7. Key Concepts for Examination
A. Random Forest Classifier
Understand how Random Forest works:
    Ensemble Learning: Combines multiple decision trees for better accuracy.
    Voting Mechanism: Outputs the majority vote (classification) of individual trees.
Be prepared to explain why Random Forest is suitable for this dataset:
    Handles high-dimensional data well.
    Robust to overfitting due to averaging of multiple trees.

B. Evaluation Metrics
    Accuracy: Percentage of correct predictions.
    Precision: Proportion of true positives among predicted positives.
    Recall: Proportion of true positives among actual positives.
    F1-Score: Harmonic mean of precision and recall.
    Confusion Matrix: Explains the distribution of predictions (TP, TN, FP, FN).

C. Medical Recommendations
Be ready to explain the recommendation logic:
    Malignant cases require immediate attention.
    Benign cases require monitoring but are less critical.


8. Practical Demonstration
During the practical examination, you might be asked to:

Explain the Code:
    Discuss data loading, model training, and evaluation steps.
Run the Code:
    Show the accuracy, confusion matrix, and classification report.
Provide Recommendations:
    Select a sample input (e.g., a row from X_test) and demonstrate the prognosis recommendation.

9. Practical Applications
This project has real-world implications in healthcare:
    Assists doctors in early cancer detection.
    Supports decision-making for follow-up actions.
    Illustrates how machine learning can improve diagnostic accuracy.

